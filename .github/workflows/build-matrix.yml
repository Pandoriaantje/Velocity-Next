name: Build (Matrix)

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            compiler: mingw
            name: Windows (MinGW)
          - os: windows-latest
            compiler: msvc
            name: Windows (MSVC)
          - os: macos-latest
            compiler: clang
            name: macOS
          - os: ubuntu-latest
            compiler: gcc
            name: Linux
    runs-on: ${{ matrix.os }}
    name: ${{ matrix.name }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive
      
      # Windows MinGW setup
      - name: Install Qt (Windows MinGW)
        if: matrix.os == 'windows-latest' && matrix.compiler == 'mingw'
        uses: jurplel/install-qt-action@v4
        with:
          version: '6.8.0'
          host: 'windows'
          target: 'desktop'
          arch: 'win64_mingw'
          modules: 'qtnetworkauth'
          cache: true
          tools: 'tools_mingw1310,qt.tools.win64_mingw1310'
          add-tools-to-path: true
      
      - name: Setup MinGW environment
        if: matrix.os == 'windows-latest' && matrix.compiler == 'mingw'
        run: |
          $qtRoot = "${{ env.QT_ROOT_DIR }}"
          $mingwPath = $null
          
          # Priority 1: Qt's bin directory
          $qtBinPath = Join-Path $qtRoot "bin"
          if (Test-Path (Join-Path $qtBinPath "g++.exe")) {
            $mingwPath = $qtBinPath
            echo "✅ Found MinGW in Qt bin"
          }
          
          # Priority 2: Tools directory
          if (-not $mingwPath) {
            $toolsRoot = (Get-Item $qtRoot).Parent.Parent.FullName
            $toolsPath = Join-Path $toolsRoot "Tools"
            if (Test-Path $toolsPath) {
              $mingwDir = Get-ChildItem $toolsPath -Directory -Filter "mingw*" | 
                         Sort-Object Name -Descending | 
                         Select-Object -First 1
              if ($mingwDir) {
                $mingwBinPath = Join-Path $mingwDir.FullName "bin"
                if (Test-Path (Join-Path $mingwBinPath "g++.exe")) {
                  $mingwPath = $mingwBinPath
                  echo "✅ Found MinGW in Tools ($($mingwDir.Name))"
                }
              }
            }
          }
          
          # Do NOT use system MinGW - causes linking errors with Qt
          if (-not $mingwPath) {
            echo "❌ ERROR: Qt's MinGW not found (required for ABI compatibility)"
            exit 1
          }
          
          $gccPath = Join-Path $mingwPath "gcc.exe"
          $gxxPath = Join-Path $mingwPath "g++.exe"
          
          if (-not (Test-Path $gccPath) -or -not (Test-Path $gxxPath)) {
            echo "❌ ERROR: Compilers not found at $mingwPath"
            exit 1
          }
          
          echo "✅ Using Qt's MinGW: $mingwPath"
          
          echo "MINGW_PATH=$mingwPath" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "CMAKE_C_COMPILER=$gccPath" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "CMAKE_CXX_COMPILER=$gxxPath" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          
          & $gxxPath --version
        shell: pwsh
      
      # Windows MSVC setup
      - name: Setup MSVC Developer Environment
        if: matrix.os == 'windows-latest' && matrix.compiler == 'msvc'
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64
      
      - name: Install Qt (Windows MSVC)
        if: matrix.os == 'windows-latest' && matrix.compiler == 'msvc'
        uses: jurplel/install-qt-action@v4
        with:
          version: '6.8.0'
          host: 'windows'
          target: 'desktop'
          arch: 'win64_msvc2022_64'
          modules: 'qtnetworkauth'
          cache: true
      
      # macOS setup
      - name: Install Qt (macOS)
        if: matrix.os == 'macos-latest'
        uses: jurplel/install-qt-action@v4
        with:
          version: '6.8.0'
          host: 'mac'
          target: 'desktop'
          arch: 'clang_64'
          modules: 'qtnetworkauth'
          cache: true
      
      # Linux setup
      - name: Install Qt (Linux)
        if: matrix.os == 'ubuntu-latest'
        uses: jurplel/install-qt-action@v4
        with:
          version: '6.8.0'
          host: 'linux'
          target: 'desktop'
          arch: 'gcc_64'
          modules: 'qtnetworkauth'
          cache: true
      
      - name: Install dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libxcb-cursor0 libgl1-mesa-dev
      
      # Configure step
      - name: Configure CMake (Windows MinGW)
        if: matrix.os == 'windows-latest' && matrix.compiler == 'mingw'
        run: |
          $env:PATH = "${{ env.MINGW_PATH }};$env:PATH"
          cmake --preset windows-mingw-release `
            -DCMAKE_C_COMPILER="${{ env.CMAKE_C_COMPILER }}" `
            -DCMAKE_CXX_COMPILER="${{ env.CMAKE_CXX_COMPILER }}"
        shell: pwsh
      
      - name: Configure CMake (Windows MSVC)
        if: matrix.os == 'windows-latest' && matrix.compiler == 'msvc'
        run: cmake --preset windows-msvc-release
        shell: pwsh
      
      - name: Configure CMake (macOS)
        if: matrix.os == 'macos-latest'
        run: cmake --preset macos-release
      
      - name: Configure CMake (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: cmake --preset linux-release
      
      # Build step
      - name: Build (Windows MinGW)
        if: matrix.os == 'windows-latest' && matrix.compiler == 'mingw'
        run: |
          $env:PATH = "${{ env.MINGW_PATH }};$env:PATH"
          cmake --build --preset windows-mingw-release
        shell: pwsh
      
      - name: Build (Windows MSVC)
        if: matrix.os == 'windows-latest' && matrix.compiler == 'msvc'
        run: cmake --build --preset windows-msvc-release
        shell: pwsh
      
      - name: Build (macOS)
        if: matrix.os == 'macos-latest'
        run: cmake --build --preset macos-release
      
      - name: Build (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: cmake --build --preset linux-release
      
      # Package step
      - name: Package (Windows MinGW)
        if: matrix.os == 'windows-latest' && matrix.compiler == 'mingw'
        run: |
          mkdir release-mingw
          cp out/build/windows-mingw-release/VelocityNext/VelocityNext.exe release-mingw/
          cp out/build/windows-mingw-release/XboxInternals/libXboxInternals.dll release-mingw/
          windeployqt release-mingw/VelocityNext.exe
        shell: pwsh
      
      - name: Package (Windows MSVC)
        if: matrix.os == 'windows-latest' && matrix.compiler == 'msvc'
        run: |
          mkdir release-msvc
          cp out/build/windows-msvc-release/VelocityNext/VelocityNext.exe release-msvc/
          cp out/build/windows-msvc-release/XboxInternals/XboxInternals.dll release-msvc/
          windeployqt release-msvc/VelocityNext.exe
        shell: pwsh
      
      - name: Package (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          mkdir -p release-macos
          cp -r out/build/macos-release/VelocityNext/VelocityNext.app release-macos/
          macdeployqt release-macos/VelocityNext.app -dmg
          mv release-macos/VelocityNext.dmg release-macos/Velocity-Next.dmg
      
      - name: Package (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          mkdir -p release-linux
          cp out/build/linux-release/VelocityNext/VelocityNext release-linux/
          cp out/build/linux-release/XboxInternals/libXboxInternals.so release-linux/
      
      # Upload artifacts
      - name: Upload artifact (Windows MinGW)
        if: matrix.os == 'windows-latest' && matrix.compiler == 'mingw'
        uses: actions/upload-artifact@v4
        with:
          name: Velocity-Next-Windows-MinGW
          path: release-mingw/
      
      - name: Upload artifact (Windows MSVC)
        if: matrix.os == 'windows-latest' && matrix.compiler == 'msvc'
        uses: actions/upload-artifact@v4
        with:
          name: Velocity-Next-Windows-MSVC
          path: release-msvc/
      
      - name: Upload artifact (macOS)
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: Velocity-Next-macOS
          path: release-macos/Velocity-Next.dmg
      
      - name: Upload artifact (Linux)
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: Velocity-Next-Linux
          path: release-linux/
